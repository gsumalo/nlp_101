cmake_minimum_required(VERSION 3.17 FATAL_ERROR)
set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX ${CMAKE_CURRENT_SOURCE_DIR}/cxx_flag_overrides.cmake)

cmake_policy(SET CMP0092 NEW)

project(NLP_101 CXX)

set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED YES)

set(BUILD_SHARED_LIBS OFF)

if(WIN32)
    set(DISTRIBUTION "Windows")
    set(OS_SELECTOR "win")
    set(CPACK_GENERATOR "ZIP")
elseif(UNIX)
    set(DISTRIBUTION "Linux")
    set(OS_SELECTOR "lin")
    set(CPACK_GENERATOR "TGZ")
else(WIN32)
    message(FATAL_ERROR "Your OS is not supported")
endif(WIN32)


if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    set(BUILD_TYPE "Debug")
    add_definitions(-D_DEBUG)
else("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    set(BUILD_TYPE "Release")
endif("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")

set(THIRD_PARTY_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/3rdPartyLibs/include" CACHE PATH "Directory containing the headers of 3rd. party libraries")
set(THIRD_PARTY_LIBRARY_DIR "${PROJECT_SOURCE_DIR}/3rdPartyLibs/lib/${OS_SELECTOR}" CACHE PATH "Directory containing the 3rd. party libraries")

add_definitions(-DUNICODE)
add_definitions(-D_UNICODE)
add_definitions(-DBOOST_BIND_NO_PLACEHOLDERS)
add_definitions(-DBOOST_SPIRIT_UNICODE)
add_definitions(-DBOOST_THREAD_USES_DATETIME)
add_definitions(-DBOOST_THREAD_VERSION=4)
add_definitions(-DGTEST_HAS_TR1_TUPLE=0)

include_directories(${PROJECT_SOURCE_DIR})
include_directories(AFTER SYSTEM ${THIRD_PARTY_INCLUDE_DIR})

if(WIN32)
 #       if("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
 #           add_compile_options(/debug:inline-debug-info)
 #       endif("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")

    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-D_ENABLE_EXTENDED_ALIGNED_STORAGE)
    add_definitions(-DNOMINMAX)
    add_definitions(-D_SCL_SECURE_NO_WARNINGS)
    add_definitions(-D_WIN32_WINNT=0x0600)
    add_definitions(-DWIN32_LEAN_AND_MEAN)
    add_definitions(-D_SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING)
    add_definitions(-D_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING)
    add_definitions(-D_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING)
    add_definitions(-D_SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING)
    add_definitions(-D_SILENCE_CXX17_UNCAUGHT_EXCEPTION_DEPRECATION_WARNING)

    add_compile_options(/bigobj)
    add_compile_options(/J)
    add_compile_options(/fp:strict)
    add_compile_options(/std:c++${CMAKE_CXX_STANDARD})
    add_compile_options(/MP)
    add_compile_options(/Wall)
    add_compile_options(/wd4355)
    add_compile_options(/wd4596)
    add_compile_options(/wd4710)
    add_compile_options(/wd4711)
    add_compile_options(/wd5204)
    add_compile_options(/WX)
    
    add_compile_options(/experimental:external)
    add_compile_options(/external:anglebrackets)
    add_compile_options(/external:W0)
elseif(UNIX)
    set(USING_COVERAGE "OFF" CACHE BOOL "Generate coverage information on debug")
    set(USING_SANITIZER "OFF" CACHE BOOL "Using sanitizer on debug")

    if(${USING_COVERAGE})
        add_compile_options(--coverage)
        link_libraries(--coverage)
    endif(${USING_COVERAGE})

    if(${USING_SANITIZER})
        add_compile_options(-fsanitize=address)
        add_compile_options(-fsanitize=undefined)
        add_compile_options(-fno-sanitize-recover)
        link_libraries(asan ubsan)
    endif(${USING_SANITIZER})

    add_compile_options(-funsigned-char)
    add_compile_options(-frounding-math)
    add_compile_options(-fsignaling-nans)
    add_compile_options(-ffloat-store)
    add_compile_options(-fno-builtin)
    add_compile_options(-fno-stack-protector)
    add_compile_options(-fno-var-tracking-assignments)
    add_compile_options(-m64)
    add_compile_options(-mfpmath=sse)
    add_compile_options(-fmessage-length=0)
    add_compile_options(-Wall)
    add_compile_options(-Wextra)
##    add_compile_options(-Wconversion)
##    add_compile_options(-Wsign-conversion)
    add_compile_options(-Wshadow)
    add_compile_options(-Werror)
##    add_compile_options(-Weffc++)
    add_compile_options(-pedantic)
    add_compile_options(-pedantic-errors)
    add_compile_options(-Wno-unused-but-set-parameter)
    add_compile_options(-Wno-unused-but-set-variable)
    add_compile_options(-Wno-comment)
    add_compile_options(-Wno-ignored-attributes)
endif(WIN32)

add_subdirectory(app)
add_subdirectory(test)

set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)
set(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
set(CPACK_PACKAGE_VERSION_MAJOR "1")
set(CPACK_PACKAGE_VERSION_MINOR "0")
set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}")
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${DISTRIBUTION}")
set(CPACK_PACKAGE_VENDOR "GSUMalo")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${CPACK_PACKAGE_VENDOR} ${CPACK_PACKAGE_NAME}")
set(CPACK_STRIP_FILES yes)

include(CPack)
